
-- 도면 이미지에서 lineno찾기 - LinenoFinder클래스작성요청
* LinenoFinder 전제사항
0.java로 개발
1.lineno 텍스트 그룹은 여러개, 여기저기 위치한다. lineno는 공백을 가지는 형식도 있어서 탐색결과 word가 여러개 가능함 
2.lineno텍스트의 방향은 0도, 90도 2가지 경우이다. 지금 만드는 lineno찾기는 0도 만 고려, 외부에서 도면이미지를 90도 회전하여 lineno찾기 호출.
3.lineno는 동일한 포맷을 가지고 있다. 도면의 종류 별로는 포맷이 다르다. 포맷확인 함수 별도 작성하여 확장성 고려
4.도면이미지 상에서의 크기를 추정할 수 있다.

* 테서렉트 OCR 실행방법
tesseract.setPageSegMode(7); // Line
List<Word> words = tesseract.getWords(yAxisSlidingWindow, TessPageIteratorLevel.RIL_WORD);

*LinenoFinder 멤버변수
    private static final Logger log = LoggerFactory.getLogger(LinenoFinder.class); // 로그 디버그용
    // 멤버 변수
    private double rectMargin;           // 도면이미지의 탐색대상 외곽마진 비율
    private int charHeight;              // lineno 문자의 높이 (pixel)
    private int charWidth;               // lineno 문자의 좌우길이 (pixel)
    private int linenoChars;             // lineno 구성 문자 갯수
    private double linenoMarginRatioY;   // 탐색 window Y축 마진 비율
    private String drawingTypeCode;      // 도면 유형 코드
    private double slidingRatioY;        // Y축 탐색Window 이동비율
    private double acceptMinSizeRatio;   // 인정 최소크기 비율  => 테서렉트 ocr결과 word의 boundingbox height의 최소유효범위
    private double acceptMaxSizeRatio;   // 인정 최대크기 비율  => 테서렉트 ocr결과 word의 boundingbox height의 최대유효범위
    private double linenoLengthMinRatio; // 예상 lineno의 최소길이 비율
    private double linenoLengthMaxRatio; // 예상 lineno의 최대길이 비율
* 생성자 
    // 생성자
    public LinenoFinder(double rectMargin, int charHeight, int charWidth, int linenoChars,
                       double linenoMarginRatioY,
                       String drawingTypeCode, double slidingRatioY,
                       double acceptMinSizeRatio, double acceptMaxSizeRatio,
                       double linenoLengthMinRatio, double linenoLengthMaxRatio) {
        if (!isValidDrawingTypeCode(drawingTypeCode)) {
            throw new IllegalArgumentException("DrawingTypeCode must be one of: A, B, C, D");
        }
        this.rectMargin = rectMargin;
        this.charHeight = charHeight;
        this.charWidth = charWidth;
        this.linenoChars = linenoChars;
        this.linenoMarginRatioY = linenoMarginRatioY;
        this.drawingTypeCode = drawingTypeCode;
        this.slidingRatioY = slidingRatioY;
        this.acceptMinSizeRatio = acceptMinSizeRatio;
        this.acceptMaxSizeRatio = acceptMaxSizeRatio;
        this.linenoLengthMinRatio = linenoLengthMinRatio;
        this.linenoLengthMaxRatio = linenoLengthMaxRatio;
    }
* 비율확인을 위한 사용예시
LinenoFinder finder = new LinenoFinder(
    0.1,            // rectMargin: 전체이미지 크기 대비 10% 마진   
    50,             // charHeight: 50픽셀 사용자가 추정한 크기 (A도면 50px)
    45,             // charWidth: 45픽셀  사용자가 추정한 크기 (A도면 45px)
    15,              // linenoChars: 6자리  (A도면 )
    0.5,            // linenoMarginRatioY: 50% 마진
    "A",            // drawingTypeCode    : A,B,C,D
    0.3,            // slidingRatioY      : 0.3
    0.9,            // acceptMinSizeRatio
    1.1,            // acceptMaxSizeRatio
    0.9,            // linenoLengthMinRatio
    1.1             // linenoLengthMaxRatio
);


*LinenoFinder findAllLineno
** 파라미터
  LinenoFinder 멤버 메소드로 자신의 멤버변수 
1.BufferedImage 도면이미지
2.Tesseract ocr 도구 instance

** 

** 동작흐름
1.상하좌위 RectMargin을 제외한 탐색대상 영역 
2.탐색대상 영역을 charHeight, linenoMarginRatioY를 반영한 탐색Window로 분할 탐색
    window height = charHeight * (1 + 2 * linenoMarginRatioY)
  탐색대상 영역의 width는 RectMargin을 제외한 전체 width
3.탐색Winndow는 y축을 sliding  하며 탐색한다.
  sliding 단위는 slidingRatioY
4.탐색결과확인 및 누적
  탐색결과 words 각각에 대하여 acceptMinSizeRatio, acceptMaxSizeRatio 를 적용 후 올바른 것만 누적
   =>테서렉트 ocr결과 word의 boundingbox height가 위 두 비율을 charHeight로 곱한 범위에 들어가도록
5.전체누적결과 머지.
  누적된 word의 boundingbox 의 영역을 전체 image의 좌표로 변환 하여
  서로 30 %이상 겹치는 부분이 있으면 confidence가 높은 word만 남긴다.
  window sliding을 y축으로 하며 겹치는 부분이 발생가능
6.머지 결과 words 필요한 경우 조합 생성
    -  조합은 전체 image의 좌표의 x축으로 연속된 word의 묶음
    -  word 끼리는 영역이 겹치지 않음( 만약 있으면 잘못 검출된 것임)
    -  예를 들어 2개의 word가 한 lineno를 나타낸다면 이 조합의 길이는 예상 lineno 길이의 범위에 들어야함
    -  예상 lineno의 최소길이 : linenoChars * charWidth *  linenoLengthMinRatio
    -  예상 lineno의 최대길이 : linenoChars * charWidth *  linenoLengthMaxRatio
    - 같은 y 축상의 word들의 배열을 만든다.
    - 위 배열을 x축 순서로 정렬한다.
    - 앞에서 부터 하나씩 꺼내어 뒤에 있는 word를 하나씩 붙여서 조합을 생성한다.
    - 이 조합은 예상 lineno의 길이 범위에 들때까지 수행한다.
    
7.텍스트 조립
    -  포맷검증을 위해 조합된 word에서 텍스트를 조립한다.
    -  두개 이상의 word가 있을 때, 왼쪽부터 word를 정렬하고
       앞쪽 word의 끝과 뒤쪽 word의 앞사이에 거리가 발생하는데 이 거리를 넘지 않는 최대 문자의 수많큼 공백문자를 넣는다.
       공백문자의 길이는 charWidth로 정한다.
       예시) word1 x좌표 : 100, width : 200  , text: abcdefg 
            word2 x좌표 : 400, width : 100  , text: 1234
            조립 text : "abcdefg  1234"
              조립중간에 100px의 여백을 채우는 40px width의 공백문자 2개
        
8. 포맷검증  이렇게 조립된 lineno 텍스트에 대해 isValidFormat을 수행한다.
    아래 코드를 이용한다. isTypeBFormat 부터는 빈 함수만 만들어둔다.
    protected boolean isValidFormat(String text) {
        switch (drawingTypeCode) {
            case "A":
                return isTypeAFormat(text);
            case "B":
                return isTypeBFormat(text);
            case "C":
                return isTypeCFormat(text);
            case "D":
                return isTypeDFormat(text);
            default:
                return false;
        }
    }

    private boolean isTypeAFormat(String text) {
        String pattern = "\\d{1,2}\"-[A-Z]{1,2}-\\d{4}-[0-9A-Z]{5}";
        if (text.matches(pattern)) {
            System.out.println("패턴이 일치합니다.");
            return true;
        } else {
            System.out.println("패턴이 일치하지 않습니다.");
            return false;
        }
    }
9. 8번 검증을 통과한 결과를 리턴한다.
   해당 결과에는 텍스트와 텍스트의 바운딩박스 좌표와 크기 정보가 담겨야한다.
   




















